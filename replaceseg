#!/bin/bash

######################################
# Replace Script :
#
# Replace segments of a file using markers
#
# Author	: Eric Johnfelt
# When		: 7/9/2016
#
######################################

# [ code-begin ExtractSegment ]

#
# Extract Segment : Extract a segment of a file between two markers
#
# Input Parameters
# file-to-search output-name begin-marker end-marker
#
# ExtractSegment ~/.bashrc ./output.txt "begin-marker-expression" "end-marker-expression"
#
function ExtractSegment()
{
	grep "$3" "$1" >> /dev/null

	if [ $? = 0 ]; then
		if [ "$2" = "stdout" ]; then
			sed -n "/$3/,/$4/p" $1
		else
			sed -n "/$3/,/$4/p" $1 > "$2"
		fi
	else
		msg="Could not file begin marker ($3) in file ($1), can't continue."
		echo -e "${msg}"
		logger -p user.warning -t "ExtractSegment" "${msg}"
		return 127
	fi

	return 0
}

# [ code-end ExtractSegment ]

# [ code-begin ExtractAllSegments ]

#
# Extract All Marked Segments
#
# Input Parameters
# file-to-read generic-begin-marker generic-end-marker
#
# ExtractAllSegments ~/.bashrc generic-begin-marker generic-end-marker
#
# This will extract all segments of the form "generic-begin-maker [name]" and "generic-end-marker [name]" to "name.snippet"
#
# Requires ExtractSegment function
function ExtractAllSegments()
{
	TMPLIST=/tmp/tmplist.${RANDOM}

	grep "$2" $1 > ${TMPLIST}

	while read line; do
		segname=`echo ${line} | cut -d" " -f4`

		ExtractSegment $1 ${segname}.snippet "$2 ${segname}" "$3 ${segname}"
	done < ${TMPLIST}

	rm ${TMPLIST}
}

# [ code-end ExtractAllSegments ]

# [ code-begin ReplaceSegment ]

#
# ReplaceSegment : Replace a segment within a file
#
# Input Parameters
# file-to-edit file-of-new-segment begin-marker end-marker
#
# ReplaceSegment ~/.bashrc ~/projects/detectnat/detectnat.seg "begin-marker-expression" "end-marker-expression"
#
function ReplaceSegment()
{
	PREFIX=/tmp/prefix.${RANDOM}
	POSTFIX=/tmp/postfix.${RANDOM}

	grep  "$3" "$1" >> /dev/null

	if [ $? = 0 ]; then
		# Backup file
		cp "$1" /tmp
		# Get lines 1 thru start marker - 1
		STARTSEG=`sed -n "/$3/=" "$1"`
		STARTSEG=$((${STARTSEG} -  1))
		# Extract the "pre" part
		sed -n "1,${STARTSEG}p" "$1" > ${PREFIX}

		if [ ! "$4" = "" ]; then
			# Get lines end marker + 1
			ENDSEG=`sed -n "/$4/=" "$1"`
			ENDSEG=$((${ENDSEG} + 1))
			# Extract the "post" part
			sed -n "${ENDSEG},//p" "$1" > ${POSTFIX}

			# Glue the parts together
			cat ${PREFIX} "$2" ${POSTFIX} > "$1"

			# Remove the intermediates
			rm ${PREFIX} ${POSTFIX}
		else
			# Combine prefix and replacement segment
			cat ${PREFIX} "$2" > "$1"

			# Remove intermediate file
			rm ${PREFIX}
		fi
	else
		echo -e "[== Begin Marker ($3) not present in ($1), can't continue."
		logger -p user.warning -t "ReplaceSegment" "Could not fine $3 marker in file $1"
	fi
}

# [ code-end ReplaceSegment ]

function Usage()
{
	echo -e "Replace Segement Script"
	echo -e "======================="
	echo -e "-r\tReplace segment\n\treplace.sh -r src-file replace-file begin-block-expression end-block-expression\n\treplace.sh -r ~/.bashrc myseg.txt \"[ begin-marker ]\" \"[ end-marker ]\""
	echo -e "-e\tExtract segment\n\treplace.sh -e src-file output-filename begin-block-expression end-block-expression (-e is optional)\n\treplace.sh ~/.bashrc output.txt \"[ begin-marker ]\" \"[ end-marker ]\""
	echo -e "-a\tExtract all segments automatically between \"generic-begin-marker\" and \"generic-end-marker\" blocks"
	echo -e "-h\tThis Usage Menu"
	echo -e "\n"
	echo -e "For extracting, if you want the extract to go to stdout, use the keywords 'stdout' as the output-filename"
}

if [ "$1" = "" ]; then
	Usage
else
	case $1 in
	"-h")
		Usage ;;
	"-r")
		MODE=replace
		SRC=$2
		SEG=$3
		BEGINSEG=$4
		ENDSEG=$5 
		;;
	"-e")
		MODE=extract
		SRC=$2
		DST=$3
		BEGINSEG=$4
		ENDSEG=$5
		;;
	"-a")
		MODE=extractall
		SRC=$2
		DST="all"
		if [ "$3" = "" ]; then
			BEGINSEG="code""-begin"
		else
			BEGINSEG="$3"
		fi
		if [ "$4" = "" ]; then
			ENDSEG="code""-end"
		else
			ENDSEG="$4"
		fi
		;;
	*)
		MODE=EXTRACT
		SRC=$1
		DST=$2
		BEGINSEG=$3
		ENDSEG=$4
		;;
	esac

	case ${MODE} in
	"replace")
		ReplaceSegment "${SRC}" "${SEG}" "${BEGINSEG}" "${ENDSEG}"
		;;
	"extract")
		ExtractSegment "${SRC}" "${DST}" "${BEGINSEG}" "${ENDSEG}"
		;;
	"extractall")
		ExtractAllSegments "${SRC}" "${BEGINSEG}" "${ENDSEG}"
		;;
	esac
fi
